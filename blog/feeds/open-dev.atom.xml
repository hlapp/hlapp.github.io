<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lappland. Inside Out. - Open Dev</title><link href="http://lappland.io/" rel="alternate"></link><link href="http://lappland.io/blog/feeds/open-dev.atom.xml" rel="self"></link><id>http://lappland.io/</id><updated>2014-01-12T21:02:42-05:00</updated><entry><title>A Creative Commons license chooser macro for Pelican blogs</title><link href="http://lappland.io/blog/2014/01/macro-for-creative-commons-licence-mark/" rel="alternate"></link><published>2014-01-12T21:02:42-05:00</published><updated>2014-01-12T21:02:42-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-12:/blog/2014/01/macro-for-creative-commons-licence-mark/</id><summary type="html">&lt;p&gt;As creative expression, blogs and other authored web content qualify for copyright protection. Yet, a number of Pelican (a static site and blog generator) themes, including the default &lt;code&gt;notmyidea&lt;/code&gt; and &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;the one I am using&lt;/a&gt;, do not include configuration variables for displaying copyright, and more importantly, the terms of reuse â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;As creative expression, blogs and other authored web content qualify for copyright protection. Yet, a number of Pelican (a static site and blog generator) themes, including the default &lt;code&gt;notmyidea&lt;/code&gt; and &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;the one I am using&lt;/a&gt;, do not include configuration variables for displaying copyright, and more importantly, the terms of reuse, i.e., the license. &lt;/p&gt;
&lt;p&gt;Presumably this is not because most blog writers don't expect their content to ever be reused. Of course, it is easy enough to tweak a theme's template(s) to include the author's choice of license. However, every tweak to a theme's templates makes it diverge a little more from its origin, and thus a little more difficult to upgrade it when the theme developer improves it. This is exactly the situation with the &lt;code&gt;pelican-bootstrap3&lt;/code&gt; theme I am using - it is under active development, including in fact by myself.&lt;/p&gt;
&lt;h2&gt;A Creative Commons license chooser as a macro&lt;/h2&gt;
&lt;p&gt;So I decided to address this in a way that would be reusable by the &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; community. I'm a big fan of &lt;a href="http://creativecommons.org"&gt;Creative Commons&lt;/a&gt; and their legal work to make the world's online content better shareable, and so I wrote a &lt;a href="http://jinja.pocoo.org/docs/templates/#macros"&gt;Jinja2 macro&lt;/a&gt; that generates, in a configurable way, a Creative Commons license mark, mirroring the choices that the &lt;a href="http://creativecommons.org/choose/"&gt;Creative Commons license chooser&lt;/a&gt; offers, and the HTML markup that it generates. Jinja2 is the templating language that Pelican uses, and so any &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican theme&lt;/a&gt; or Pelican-powered blog could take advantage of it. You can see the result at the bottom of this blog.&lt;/p&gt;
&lt;p&gt;The code for the macro is on Github: &lt;a href="http://github.com/hlapp/cc-tools"&gt;http://github.com/hlapp/cc-tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are its current capabilities as per its documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{# Choose the license either by name (CC-BY, CC-BY-SA, CC-BY-NC-SA, or      #}
{# CC-BY-NC-ND), or by its features (allow derivatives: Yes, No, ShareAlike;#}
{# allow commercial reuse: Yes, No). Name, if provided, takes precedence,   #}
{# and case is ignored.                                                     #}
{#                                                                          #}
{# Optional:                                                                #}
{#   br_after_icon: if true put a line break after the license icon         #}
{#   attr_markup: if true create markup for fulll attribution               #}
{#   attr_props: if attr_markup, a dict with title, name, and url keys      #}
{#               specifying how under which title, to which creator, and    #}
{#               to which URL to attribute the work                         #}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;As an example for how to apply this to a Pelican theme to add a configurable license mark, consider the &lt;a href="https://github.com/DandyDev/pelican-bootstrap3/pull/43"&gt;change set in the pull request&lt;/a&gt; that applies it to the &lt;code&gt;pelican-bootstrap3&lt;/code&gt; theme. Apart from dropping the macro in an appropriate location, and adding configuration documentation to the README, &lt;a href="https://github.com/hlapp/pelican-bootstrap3/blob/acf6a0a1b0efb0ff4c6711cd5b5b6d33c2999bde/templates/includes/footer.html#L14-17"&gt;here is where the macro is called&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;          {%- if CC_LICENSE or CC_LICENSE_DERIVATIVES or CC_LICENSE_COMMERCIAL %}
              {% from &amp;#39;includes/cc-license.html&amp;#39; import cc_license_mark %}
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;small&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ cc_license_mark(cc_name=CC_LICENSE,derivatives=CC_LICENSE_DERIVATIVES,commercial=CC_LICENSE_COMMERCIAL,attr_markup=CC_ATTR_MARKUP,attr_props={&amp;#39;title&amp;#39;:SITENAME,&amp;#39;name&amp;#39;:article.author if article else AUTHOR,&amp;#39;url&amp;#39;:SITEURL}) }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;small&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          {% endif %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;pelicanconf.py&lt;/code&gt;, you can then enable the license mark in two ways. Either you simply set its name, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Content licensing: CC-BY&lt;/span&gt;
&lt;span class="n"&gt;CC_LICENSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;CC-BY&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively, you can specify which features you want the license mark to fulfill:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Content licensing: permit derivatives, permit commercial use&lt;/span&gt;
&lt;span class="n"&gt;CC_LICENSE_DERIVATIVES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CC_LICENSE_COMMERCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Optionally, you can ask for full RDFa-compliant markup for the title, author, and source URL with which attribution should be made:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Include human and machine-readable markup for title (name of the site), &lt;/span&gt;
&lt;span class="c1"&gt;# author (article author or AUTHOR),  and URL (SITEURL) in license mark&lt;/span&gt;
&lt;span class="n"&gt;CC_ATTR_MARKUP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Why not a plugin that uses the CC API?&lt;/h2&gt;
&lt;p&gt;Good question. For one, I haven't figured out yet how to cast this as a Pelican plugin. The documenation is not very details, and speaks about generators and writers, neither of which strikes me as an immediate fit. If it could be a generator plugin, how would it be invoked? &lt;/p&gt;
&lt;p&gt;Second, sadly the &lt;a href="http://api.creativecommons.org/docs/index.html"&gt;Creative Commons API&lt;/a&gt; seems to have been neglected from maintenance. The &lt;a href="http://api.creativecommons.org/docs/readme_15.html"&gt;1.5 version&lt;/a&gt; is several years old, and even the "&lt;a href="http://api.creativecommons.org/docs/readme_dev.html"&gt;development&lt;/a&gt;" version still returns the 3.0 versions of the licenses. On the flip side, using the API probably wouldn't simplify anything, and instead would require being online when the site is generated.&lt;/p&gt;
&lt;h2&gt;Why no public domain (&lt;a href="http://creativecommons.org/about/cc0"&gt;CC Zero&lt;/a&gt;) choice?&lt;/h2&gt;
&lt;p&gt;I haven't gotten to that yet. Most people I know would rather assert copyright &lt;a href="http://dx.doi.org/10.6084/m9.figshare.799766"&gt;even on content that isn't eligible&lt;/a&gt;, rather than waive it. But &lt;a href="https://github.com/hlapp/cc-tools/issues/1"&gt;the feature is registered&lt;/a&gt;, and if you know how to add it, please fork the repo and submit a pull request. &lt;/p&gt;
&lt;p&gt;Also, please add issues for any other features you'd like to see.&lt;/p&gt;
&lt;h2&gt;And why does a license mark matter?&lt;/h2&gt;
&lt;p&gt;Many people understand meanwhile that stating a license for software source code is important, because it achieves clarity on the terms of reuse. &lt;a href="http://wiki.creativecommons.org/Frequently_Asked_Questions"&gt;Creative Commons explains this&lt;/a&gt; much better, but in a nutshell, the same principle as for source code applies to authored content. As creative expression, copyright vests in its creator whether they assert it or not. A license grants rights that users would otherwise not have, and it is explicit about them.&lt;/p&gt;</content><category term="open source"></category><category term="hacking"></category></entry><entry><title>Why hacking on your site is worth bothering</title><link href="http://lappland.io/blog/2014/01/why-its-worth-bothering/" rel="alternate"></link><published>2014-01-06T23:27:12-05:00</published><updated>2014-01-06T23:27:12-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-06:/blog/2014/01/why-its-worth-bothering/</id><summary type="html">&lt;p&gt;Obviously the site isn't ugly anymore. Well, IMHO anyway. I've switched the site to a &lt;a href="http://getbootstrap.com/"&gt;Bootstrap3&lt;/a&gt; theme (specifically, the &lt;a href="http://bootswatch.com/flatly/"&gt;flatly theme&lt;/a&gt; of the &lt;a href="http://bootswatch.com/"&gt;Bootswatch&lt;/a&gt; collection, using the &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; theme for, well, Pelican), and have since made &lt;a href="https://github.com/search?p=1&amp;amp;q=author%3Ahlapp+repo%3ADandyDev%2Fpelican-bootstrap3&amp;amp;ref=searchresults&amp;amp;type=Issues"&gt;a number of fixes and improvements&lt;/a&gt; to the Pelican theme code. More are in â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Obviously the site isn't ugly anymore. Well, IMHO anyway. I've switched the site to a &lt;a href="http://getbootstrap.com/"&gt;Bootstrap3&lt;/a&gt; theme (specifically, the &lt;a href="http://bootswatch.com/flatly/"&gt;flatly theme&lt;/a&gt; of the &lt;a href="http://bootswatch.com/"&gt;Bootswatch&lt;/a&gt; collection, using the &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; theme for, well, Pelican), and have since made &lt;a href="https://github.com/search?p=1&amp;amp;q=author%3Ahlapp+repo%3ADandyDev%2Fpelican-bootstrap3&amp;amp;ref=searchresults&amp;amp;type=Issues"&gt;a number of fixes and improvements&lt;/a&gt; to the Pelican theme code. More are in the pipeline.&lt;/p&gt;
&lt;p&gt;In fact, I'm quite pleased with the appearance now. You could consider this the good news. It's also taken me the better part of 3 days to get there. You could consider this the bad news, but I don't (not that I wouldn't have gladly gotten there faster). Why? I spent a lot of this time learning about awesome open-source tools such as &lt;a href="http://fontawesome.io/"&gt;font-awesome&lt;/a&gt;, &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, and &lt;a href="http://jinja.pocoo.org/"&gt;Jinja2 templates&lt;/a&gt;, all components that can be used (and some of which are being used in my team) for building many kinds of web-applications. I figured out why some of my changes were resulting in fatal Pelican exits. I refreshed my git-fu, my memory of git commands, and spent time thinking about how best to generate clean pull requests. Not only can all of these prove useful to me later in numerous ways, I also actually enjoyed the time. And it allowed me to make someone's software project better, even if ever so little.&lt;/p&gt;
&lt;p&gt;Which is probably part of why I feel very satisfied with the result, and certainly much more than I would have if I had stood up a Wordpress blog, even if that would have been vastly easier. And I really don't mean to pick on Wordpress - it's great software I have used for my own and still use to this day for research project blogs. Substitute your favorite blogging "platform", it's the same story - invariably their editing interfaces annoy or outright suck, because they're made to work for everyone (rather than me choosing what works best for me), and they fail, as they must, in subtle ways trying to hide the complexity of HTML from the user. So invariably what you learn from using them is how to work around the sometimes exasperating quirks of their editors. Not very satisfying to me: For what else can you use the tricks you learn, and who else can you help with them?&lt;/p&gt;
&lt;p&gt;Hence, so far so good - this endeavor has already returned some of what I was hoping to get out of it.&lt;/p&gt;</content><category term="open source"></category><category term="hacking"></category></entry><entry><title>Ugly but live: Practicing release early.</title><link href="http://lappland.io/blog/2014/01/ugly-but-live/" rel="alternate"></link><published>2014-01-02T20:18:02-05:00</published><updated>2014-01-02T20:18:02-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-02:/blog/2014/01/ugly-but-live/</id><summary type="html">&lt;p&gt;The site is now live on Github pages. Not yet under it's eventual custom URL, very raw, very ugly (yes, I don't at all like the default theme!), and essentially no content. &lt;/p&gt;
&lt;p&gt;But that's precisely the point. I'm an advocate of release early, so I should try and walk the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The site is now live on Github pages. Not yet under it's eventual custom URL, very raw, very ugly (yes, I don't at all like the default theme!), and essentially no content. &lt;/p&gt;
&lt;p&gt;But that's precisely the point. I'm an advocate of release early, so I should try and walk the talk. I am precisely trying not to overthink this, so here it goes. It's a long ways to go, but I've fixed my installation of &lt;a href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;, installed &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;, created a site skeleton, and worked through the &lt;a href="http://docs.getpelican.com/en/3.3.0/settings.html"&gt;litany of settings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The only thing I did try to think through at least a little is how I want my URLs to look. I couldn't help it - once content is on the web, I care about its URI not changing frivolously. &lt;/p&gt;</content><category term="open content"></category><category term="release"></category></entry></feed>