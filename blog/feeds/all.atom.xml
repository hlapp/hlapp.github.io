<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lappland. Inside Out.</title><link href="http://lappland.io/" rel="alternate"></link><link href="http://lappland.io/blog/feeds/all.atom.xml" rel="self"></link><id>http://lappland.io/</id><updated>2014-01-17T22:09:15-05:00</updated><entry><title>Data flirting, or an attempt to save a beautiful tree?</title><link href="http://lappland.io/blog/2014/01/data-flirting-or-saving-beautiful-tree/" rel="alternate"></link><updated>2014-01-17T22:09:15-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-17:blog/2014/01/data-flirting-or-saving-beautiful-tree/</id><summary type="html">&lt;p&gt;Recently, &lt;a href="http://treebase.org" title="TreeBASE"&gt;TreeBASE&lt;/a&gt; received the following request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;I am just beginning to compile a submission.&lt;/p&gt;
&lt;p&gt;The data-matrix is no problem. But in your introductory screens I see nothing explicit about the file format to be used for trees. By implication, these too should be in Nexus format, whereas I would prefer to submit tiff files of the actual published figures.&lt;/p&gt;
&lt;p&gt;Please advise.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you care about preservation, sharing, and reusability of phylogenetic data as much as I do, your first reaction might be that combination of annoyance and incredulity we typically refer to by three capital letters. And never mind that the &lt;a href="http://treebase.org/treebase-web/submitTutorial.html"&gt;submission instructions&lt;/a&gt; say &lt;em&gt;"Data are uploaded to TreeBASE in the NEXUS format"&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;But upon closer inspection, as much as it appears like a case of data flirting&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, it might just be a case of someone trying to save a beautiful tree. As Rob Guralnick, Mark Westneat, and I &lt;a href="http://dx.doi.org/10.7287/peerj.preprints.206v1"&gt;wrote in a submission to the 2012 iEvoBio Conference&lt;/a&gt;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The story of biological evolution is highly complex and the subject of an enduring quest for better understanding. Yet it is also one of remarkable beauty, as given testimony by the numerous phylogenetic illustrations in publications that show in fascinating detail how traits, function, or morphology may have evolved along a tree. [Almost] all of them end up buried in articles, undiscoverable on their own, locked away behind paywalls, copyrighted by the publisher rather than the creator, and unavailable for repurposing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure style="max-width: 380px;" class="floatright"&gt;
&lt;a href="http://www.pnas.org/content/108/14/5690/F1.expansion.html"&gt;&lt;img class="img-responsive" src="/images/Wiegmann_et_al_Figure1.png"/&gt;&lt;/a&gt;&lt;figcaption&gt;
Phylogenetic tree for Diptera. Reproduced from Figure 1 in Wiegmann BM et al. (2011) &lt;a href="http://dx.doi.org/10.1073/pnas.1012675108" target="_blank"&gt;Episodic radiations in the fly tree of life&lt;/a&gt;. Proc Natl Acad Sci U S A 108: 5690â€“5695.
&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Phylogenetic tree illustrations, such as the one to the right, can be rich in information much beyond the topology. Today, no good format exists for archiving this information, let alone in a machine-interpretable form&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, other than archiving the image and archiving the accompanying (natural language) arcticle text. Text-based and thus machine-readable phylogenetic data formats such as &lt;a href="http://nexml.org"&gt;NeXML&lt;/a&gt;&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;, NEXUS&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;, and &lt;a href="http://en.wikipedia.org/wiki/Newick_format"&gt;Newick&lt;/a&gt;, to different degrees allow one to store metadata about elements of a tree right along with the tree, but at present even NeXML doesn't even come close&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; to cover the whole breadth of visual adornments that authors might use to convey information. Hence, If one were to archive only the machine-readable version of a phylogeny, phylogenetic knowledge near and dear to an author's heart may easily be lost.&lt;/p&gt;
&lt;p&gt;So why not archive both? Unfortunately, TreeBASE will not take an image of a tree, only a (text-based) NEXUS file. Or fortunately, depending on your perspective. At least it ensures that the phylogenies it holds are available in machine-readable form. The digital data archive &lt;a href="http://datadryad.org"&gt;Dryad&lt;/a&gt; shows that this otherwise isn't to be taken for granted. Although it gives &lt;a href="http://datadryad.org/pages/faq#depositing-acceptable-data"&gt;some general guidelines&lt;/a&gt;, due to its broad disciplinary scope Dryad does not and arguably cannot impose strict requirements on the format of deposited data. This gives authors of published papers the flexibility to archive any kind of data they deem supporting the article or otherwise worth preserving. On the flip side this flexibility then doesn't prevent records which include a phylogeny &lt;em&gt;only&lt;/em&gt; in image format. And looking at some examples (&lt;a href="http://dx.doi.org/10.5061/dryad.vp634306"&gt;here&lt;/a&gt; and &lt;a href="http://datadryad.org/resource/doi:10.5061/dryad.3mt58823"&gt;here&lt;/a&gt;), these don't even look like containing information in visual form that would be difficult or impossible to include in a text format.&lt;/p&gt;
&lt;p&gt;Even a phylogeny that is archived in machine-readable format is not necessarily fit for a purpose that would require machine readability&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;. In response to the difficulties the Open Tree has encountered&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt; in synthesizing a Tree of Life from all published trees, investigators from this and other large-scale phylogenetic knowledge synthesis projects are now drafting guidelines for how to archive a phylogeny so it can best be built upon by others in the future. &lt;a href="https://docs.google.com/document/d/1rDHUQYBM079w0v8xpWw2t292m2N3FeaaZucEsWAywYI/edit#"&gt;Public comment and input is welcome&lt;/a&gt;, and will likely become part of phylogenetic data sharing mandates that NSF &lt;a href="http://blog.opentreeoflife.org/2014/01/15/data-sharing-opentree-and-golife/"&gt;appears determined to include in funding opportunities&lt;/a&gt;&lt;sup id="fnref:8"&gt;&lt;a class="footnote-ref" href="#fn:8" rel="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;To my knowledge, the term &lt;em&gt;data flirting&lt;/em&gt; was coined by &lt;a href="http://en.wikipedia.org/wiki/Carole_Goble"&gt;Carole Goble&lt;/a&gt;, although it seems difficult to find a direct citation. I first heard her use it during &lt;a href="http://www.iscb.org/ismbeccb2013-program/ismbeccb2013-keynotes/ismbeccb2013-carolegoble"&gt;her keynote at ISMB 2013&lt;/a&gt;, and it caught on instantly with the audience. The following is the best mention I could find on the interwebs, giving meaning &lt;em&gt;and&lt;/em&gt; context: &lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&amp;quot;Papers are data flirting exercises&amp;quot;, says .&lt;a href="https://twitter.com/CaroleAnneGoble"&gt;@CaroleAnneGoble&lt;/a&gt; - show some metadata to make people want the real thing. &lt;a href="https://twitter.com/search?q=%23ismbeccb&amp;amp;src=hash"&gt;#ismbeccb&lt;/a&gt; &lt;a href="https://twitter.com/search?q=%23openscience&amp;amp;src=hash"&gt;#openscience&lt;/a&gt;&lt;/p&gt;&amp;mdash; Daniel Mietchen (@EvoMRI) &lt;a href="https://twitter.com/EvoMRI/statuses/359578812226347008"&gt;July 23, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Here I'm extending the meaning of &lt;em&gt;data flirting&lt;/em&gt; to include &lt;em&gt;"show some non-reusable form of the data so I want to ask you for the real thing"&lt;/em&gt;. &amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/hlapp/liberating-our-beautiful-trees-a-call-to-arms"&gt;Slides for the presented talk&lt;/a&gt; are on Slideshare. Interestingly, although it is a purely aspirational talk, in the sense that there is no active project or community initiative behind it (yet?), it is my second-most viewed slideshow on Slideshare. Perhaps it's the title that gets people to click on it accidentally? &amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Efforts to address this have emerged. The Phylotastic II hackathon by NESCent's &lt;a href="http://www.evoio.org/wiki/HIP"&gt;Hackathons, Interoperabiliy, Phylogenetics&lt;/a&gt; (HIP) Working Group gave rise to a subgroup named &lt;a href="http://www.evoio.org/wiki/.TSS_and_extended_NeXML"&gt;PhyloStyloTastic&lt;/a&gt; aiming to create a CSS-like standard for "styled" phylogenies. &lt;a href="http://www.jsphylosvg.com/"&gt;jsPhyloSVG&lt;/a&gt; is a JavaScript library that renders &lt;a href="http://www.phyloxml.org/"&gt;phyloXML&lt;/a&gt;-formatted phylogenies with graphical adornment markup.&lt;/p&gt;
&lt;p&gt;See also this publication: Smits SA., Ouverney CC (2010) &lt;a href="](http://dx.doi.org/10.1371/journal.pone.0012267)"&gt;jsPhyloSVG: A Javascript Library for Visualizing Interactive and Vector-Based Phylogenetic Trees on the Web&lt;/a&gt;. PLoS ONE 5: e12267.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Vos RA, Balhoff JP, Caravas JA, Holder MT, Lapp H, et al. (2012) &lt;a href="http://dx.doi.org/10.1093/sysbio/sys025"&gt;NeXML: rich, extensible, and verifiable representation of comparative data and metadata&lt;/a&gt;. Syst Biol 61: 675â€“689.&lt;/p&gt;
&lt;p&gt;One of the novelties of NeXML is that allows arbitrary (RDFa-style) metadata annotation of any element of a phylogeny. In principle, this could include stylistic or graphical markup, but a convention or standard for such a markup annotation does not exist yet, let alone software that would interpret it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;Maddison D, Swofford D, Maddison W (1997) &lt;a href="http://www.ncbi.nlm.nih.gov/pubmed/11975335"&gt;NEXUS: an extensible file format for systematic information&lt;/a&gt;. Syst Biol 46: 590â€“621.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;&lt;a href="http://dx.doi.org/10.6084/m9.figshare.902865"&gt;This abstract&lt;/a&gt;, and the &lt;a href="http://www.slideshare.net/hlapp/miapa-i-evobio-2013"&gt;slides&lt;/a&gt;, for a lightning talk I and a group of collaborators presented at the 2013 iEvoBio Conference give some high-level background. See also this paper: Leebens-Mack J, Vision T, Brenner E, Bowers JE, Cannon S, et al. (2006) &lt;a href="http://dx.doi.org/10.1089/omi.2006.10.231"&gt;Taking the first steps towards a standard for reporting on phylogenies: Minimum Information About a Phylogenetic Analysis (MIAPA)&lt;/a&gt;. OMICS 10: 231â€“237.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Drew BT, Gazis R, Cabezas P, Swithers KS, Deng J, et al. (2013) &lt;a href="http://dx.doi.org/10.1371/journal.pbio.1001636"&gt;Lost Branches on the Tree of Life&lt;/a&gt;. PLoS Biol 11: e1001636.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:8"&gt;
&lt;p&gt;Instead of the typically vague and generic statements found in past NSF program solicitations, recent ones have become increasingly specific (e.g., see the  &lt;a href="http://www.nsf.gov/pubs/2014/nsf14525/nsf14525.htm"&gt;2014 Dimensions of Biodiversity&lt;/a&gt; solicitation). Why these are problematic deserves its own discussion. I'll update this footnote with a link once that post is up.&amp;#160;&lt;a class="footnote-backref" href="#fnref:8" rev="footnote" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="data sharing"></category><category term="data reuse"></category></entry><entry><title>A Creative Commons license chooser macro for Pelican blogs</title><link href="http://lappland.io/blog/2014/01/macro-for-creative-commons-licence-mark/" rel="alternate"></link><updated>2014-01-12T21:02:42-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-12:blog/2014/01/macro-for-creative-commons-licence-mark/</id><summary type="html">&lt;p&gt;As creative expression, blogs and other authored web content qualify for copyright protection. Yet, a number of Pelican (a static site and blog generator) themes, including the default &lt;code&gt;notmyidea&lt;/code&gt; and &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;the one I am using&lt;/a&gt;, do not include configuration variables for displaying copyright, and more importantly, the terms of reuse, i.e., the license. &lt;/p&gt;
&lt;p&gt;Presumably this is not because most blog writers don't expect their content to ever be reused. Of course, it is easy enough to tweak a theme's template(s) to include the author's choice of license. However, every tweak to a theme's templates makes it diverge a little more from its origin, and thus a little more difficult to upgrade it when the theme developer improves it. This is exactly the situation with the &lt;code&gt;pelican-bootstrap3&lt;/code&gt; theme I am using - it is under active development, including in fact by myself.&lt;/p&gt;
&lt;h2&gt;A Creative Commons license chooser as a macro&lt;/h2&gt;
&lt;p&gt;So I decided to address this in a way that would be reusable by the &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; community. I'm a big fan of &lt;a href="http://creativecommons.org"&gt;Creative Commons&lt;/a&gt; and their legal work to make the world's online content better shareable, and so I wrote a &lt;a href="http://jinja.pocoo.org/docs/templates/#macros"&gt;Jinja2 macro&lt;/a&gt; that generates, in a configurable way, a Creative Commons license mark, mirroring the choices that the &lt;a href="http://creativecommons.org/choose/"&gt;Creative Commons license chooser&lt;/a&gt; offers, and the HTML markup that it generates. Jinja2 is the templating language that Pelican uses, and so any &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican theme&lt;/a&gt; or Pelican-powered blog could take advantage of it. You can see the result at the bottom of this blog.&lt;/p&gt;
&lt;p&gt;The code for the macro is on Github: &lt;a href="http://github.com/hlapp/cc-tools"&gt;http://github.com/hlapp/cc-tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are its current capabilities as per its documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{# Choose the license either by name (CC-BY, CC-BY-SA, CC-BY-NC-SA, or      #}
{# CC-BY-NC-ND), or by its features (allow derivatives: Yes, No, ShareAlike;#}
{# allow commercial reuse: Yes, No). Name, if provided, takes precedence,   #}
{# and case is ignored.                                                     #}
{#                                                                          #}
{# Optional:                                                                #}
{#   br_after_icon: if true put a line break after the license icon         #}
{#   attr_markup: if true create markup for fulll attribution               #}
{#   attr_props: if attr_markup, a dict with title, name, and url keys      #}
{#               specifying how under which title, to which creator, and    #}
{#               to which URL to attribute the work                         #}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;As an example for how to apply this to a Pelican theme to add a configurable license mark, consider the &lt;a href="https://github.com/DandyDev/pelican-bootstrap3/pull/43"&gt;change set in the pull request&lt;/a&gt; that applies it to the &lt;code&gt;pelican-bootstrap3&lt;/code&gt; theme. Apart from dropping the macro in an appropriate location, and adding configuration documentation to the README, &lt;a href="https://github.com/hlapp/pelican-bootstrap3/blob/acf6a0a1b0efb0ff4c6711cd5b5b6d33c2999bde/templates/includes/footer.html#L14-17"&gt;here is where the macro is called&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;          {%- if CC_LICENSE or CC_LICENSE_DERIVATIVES or CC_LICENSE_COMMERCIAL %}
              {% from &amp;#39;includes/cc-license.html&amp;#39; import cc_license_mark %}
              &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;small&amp;gt;&lt;/span&gt;{{ cc_license_mark(cc_name=CC_LICENSE,derivatives=CC_LICENSE_DERIVATIVES,commercial=CC_LICENSE_COMMERCIAL,attr_markup=CC_ATTR_MARKUP,attr_props={&amp;#39;title&amp;#39;:SITENAME,&amp;#39;name&amp;#39;:article.author if article else AUTHOR,&amp;#39;url&amp;#39;:SITEURL}) }}&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          {% endif %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;pelicanconf.py&lt;/code&gt;, you can then enable the license mark in two ways. Either you simply set its name, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Content licensing: CC-BY&lt;/span&gt;
&lt;span class="n"&gt;CC_LICENSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CC-BY&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively, you can specify which features you want the license mark to fulfill:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Content licensing: permit derivatives, permit commercial use&lt;/span&gt;
&lt;span class="n"&gt;CC_LICENSE_DERIVATIVES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CC_LICENSE_COMMERCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Optionally, you can ask for full RDFa-compliant markup for the title, author, and source URL with which attribution should be made:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Include human and machine-readable markup for title (name of the site), &lt;/span&gt;
&lt;span class="c"&gt;# author (article author or AUTHOR),  and URL (SITEURL) in license mark&lt;/span&gt;
&lt;span class="n"&gt;CC_ATTR_MARKUP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Why not a plugin that uses the CC API?&lt;/h2&gt;
&lt;p&gt;Good question. For one, I haven't figured out yet how to cast this as a Pelican plugin. The documenation is not very details, and speaks about generators and writers, neither of which strikes me as an immediate fit. If it could be a generator plugin, how would it be invoked? &lt;/p&gt;
&lt;p&gt;Second, sadly the &lt;a href="http://api.creativecommons.org/docs/index.html"&gt;Creative Commons API&lt;/a&gt; seems to have been neglected from maintenance. The &lt;a href="http://api.creativecommons.org/docs/readme_15.html"&gt;1.5 version&lt;/a&gt; is several years old, and even the "&lt;a href="http://api.creativecommons.org/docs/readme_dev.html"&gt;development&lt;/a&gt;" version still returns the 3.0 versions of the licenses. On the flip side, using the API probably wouldn't simplify anything, and instead would require being online when the site is generated.&lt;/p&gt;
&lt;h2&gt;Why no public domain (&lt;a href="http://creativecommons.org/about/cc0"&gt;CC Zero&lt;/a&gt;) choice?&lt;/h2&gt;
&lt;p&gt;I haven't gotten to that yet. Most people I know would rather assert copyright &lt;a href="http://dx.doi.org/10.6084/m9.figshare.799766"&gt;even on content that isn't eligible&lt;/a&gt;, rather than waive it. But &lt;a href="https://github.com/hlapp/cc-tools/issues/1"&gt;the feature is registered&lt;/a&gt;, and if you know how to add it, please fork the repo and submit a pull request. &lt;/p&gt;
&lt;p&gt;Also, please add issues for any other features you'd like to see.&lt;/p&gt;
&lt;h2&gt;And why does a license mark matter?&lt;/h2&gt;
&lt;p&gt;Many people understand meanwhile that stating a license for software source code is important, because it achieves clarity on the terms of reuse. &lt;a href="http://wiki.creativecommons.org/Frequently_Asked_Questions"&gt;Creative Commons explains this&lt;/a&gt; much better, but in a nutshell, the same principle as for source code applies to authored content. As creative expression, copyright vests in its creator whether they assert it or not. A license grants rights that users would otherwise not have, and it is explicit about them.&lt;/p&gt;</summary><category term="open source"></category><category term="hacking"></category></entry><entry><title>Why hacking on your site is worth bothering</title><link href="http://lappland.io/blog/2014/01/why-its-worth-bothering/" rel="alternate"></link><updated>2014-01-06T23:27:12-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-06:blog/2014/01/why-its-worth-bothering/</id><summary type="html">&lt;p&gt;Obviously the site isn't ugly anymore. Well, IMHO anyway. I've switched the site to a &lt;a href="http://getbootstrap.com/"&gt;Bootstrap3&lt;/a&gt; theme (specifically, the &lt;a href="http://bootswatch.com/flatly/"&gt;flatly theme&lt;/a&gt; of the &lt;a href="http://bootswatch.com/"&gt;Bootswatch&lt;/a&gt; collection, using the &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; theme for, well, Pelican), and have since made &lt;a href="https://github.com/search?p=1&amp;amp;q=author%3Ahlapp+repo%3ADandyDev%2Fpelican-bootstrap3&amp;amp;ref=searchresults&amp;amp;type=Issues"&gt;a number of fixes and improvements&lt;/a&gt; to the Pelican theme code. More are in the pipeline.&lt;/p&gt;
&lt;p&gt;In fact, I'm quite pleased with the appearance now. You could consider this the good news. It's also taken me the better part of 3 days to get there. You could consider this the bad news, but I don't (not that I wouldn't have gladly gotten there faster). Why? I spent a lot of this time learning about awesome open-source tools such as &lt;a href="http://fontawesome.io/"&gt;font-awesome&lt;/a&gt;, &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, and &lt;a href="http://jinja.pocoo.org/"&gt;Jinja2 templates&lt;/a&gt;, all components that can be used (and some of which are being used in my team) for building many kinds of web-applications. I figured out why some of my changes were resulting in fatal Pelican exits. I refreshed my git-fu, my memory of git commands, and spent time thinking about how best to generate clean pull requests. Not only can all of these prove useful to me later in numerous ways, I also actually enjoyed the time. And it allowed me to make someone's software project better, even if ever so little.&lt;/p&gt;
&lt;p&gt;Which is probably part of why I feel very satisfied with the result, and certainly much more than I would have if I had stood up a Wordpress blog, even if that would have been vastly easier. And I really don't mean do pick on Wordpress - it's great software I have used for my own and still use to this day for research project blogs. Substitute your favorite blogging "platform", it's the same story - invariably their editing interfaces annoy out outright suck, because they're made to work for everyone (rather than me choosing what works best for me), and they fail, as they must, in subtle ways trying to hide the complexity of HTML from the user. So invariably what you learn from using them is how to work around the sometimes exasperating quirks of their editors. Not very satisfying to me: For what else can you use the tricks you learn, and who else can you help with them?&lt;/p&gt;
&lt;p&gt;Hence, so far so good - this endeavor has already returned some of what I was hoping to get out of it.&lt;/p&gt;</summary><category term="open source"></category><category term="hacking"></category></entry><entry><title>Ugly but live: Practicing release early.</title><link href="http://lappland.io/blog/2014/01/ugly-but-live/" rel="alternate"></link><updated>2014-01-02T20:18:02-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-02:blog/2014/01/ugly-but-live/</id><summary type="html">&lt;p&gt;The site is now live on Github pages. Not yet under it's eventual custom URL, very raw, very ugly (yes, I don't at all like the default theme!), and essentially no content. &lt;/p&gt;
&lt;p&gt;But that's precisely the point. I'm an advocate of release early, so I should try and walk the talk. I am precisely trying not to overthink this, so here it goes. It's a long ways to go, but I've fixed my installation of &lt;a href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;, installed &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;, created a site skeleton, and worked through the &lt;a href="http://docs.getpelican.com/en/3.3.0/settings.html"&gt;litany of settings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The only thing I did try to think through at least a little is how I want my URLs to look. I couldn't help it - once content is on the web, I care about its URI not changing frivolously. &lt;/p&gt;</summary><category term="open content"></category><category term="release"></category></entry><entry><title>A New Blog Is Born</title><link href="http://lappland.io/blog/2014/01/a-new-blog/" rel="alternate"></link><updated>2014-01-01T23:48:47-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-01:blog/2014/01/a-new-blog/</id><summary type="html">&lt;p&gt;I am proudly bringing this site to life. It has been created using plain text and Pelican, a static site generator written in Python. Yes, Python.&lt;/p&gt;</summary><category term="testing"></category></entry></feed>