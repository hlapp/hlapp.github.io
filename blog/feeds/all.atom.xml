<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lappland. Inside Out.</title><link href="http://lappland.io/" rel="alternate"></link><link href="http://lappland.io/blog/feeds/all.atom.xml" rel="self"></link><id>http://lappland.io/</id><updated>2014-03-24T08:37:32-04:00</updated><entry><title>Scientific peer-review as web-annotations: an experiment</title><link href="http://lappland.io/blog/2014/03/open-peer-review-as-annotations/" rel="alternate"></link><updated>2014-03-24T08:37:32-04:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-03-24:blog/2014/03/open-peer-review-as-annotations/</id><summary type="html">&lt;p&gt;Recently I was invited by the journal &lt;a href="http://f1000research.com/"&gt;F1000 Research&lt;/a&gt; to review an article about &lt;a href="http://software-carpentry.org"&gt;Software Carpentry&lt;/a&gt;, a wildly popular programming best-practices teaching workshop. As I sat down to write the review, loathing the highly antiquated and onerous process that peer-review remains to this day, I realized that the publishing model of the journal might just be the perfect prerequisite for trying out an entirely new way of peer-reviewing, namely by annotating online text, using the &lt;a href="http://hypothes.is"&gt;Hypothes.is&lt;/a&gt; platform. What follows is an account of what motivated me to experiment with this, and what resulted from it.&lt;/p&gt;
&lt;h2&gt;One step in fixing peer-review: open reviews&lt;/h2&gt;
&lt;p&gt;I have been among those arguing that scientific peer-review is broken, in particular the traditional anonymous closed peer-review model. Peer-reviews in &lt;a href="http://f1000research.com/"&gt;F1000 Research&lt;/a&gt; are strictly &lt;a href="https://f1000research.com/referee-guidelines#key-points"&gt;open and associated with the reviewer's identity&lt;/a&gt; &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. Furthermore, the journal practices post-publication review: It publishes manuscripts online almost immediately (after passing some basic quality checks) upon submission. Peer-reviews, which the journal invites, as done traditionally, from peers in pertinent fields, comment on and issue verdicts on an article's scientific soundness. The reviews then determine whether a major revision is required, and whether the article is indexed for searching by F1000 itself or by other scientific literature search services (such as Pubmed).&lt;/p&gt;
&lt;p&gt;This publishing model allowed thinking about experimenting without concern for comments being public or associated with my identity or not.&lt;/p&gt;
&lt;h2&gt;Why the peer-review process is still loathsome&lt;/h2&gt;
&lt;p&gt;As anyone who has ever written or received a scientific peer-review will know, the way this is done, specifically the way we reference, comment, and respond to comments on parts of the text, still follows antiquated procedures from the days of print-only publishing and typewriters. This is the case whether peer-reviews are open or not. Articles are typically sent to reviewers with line and page numbers added to the margins by a publisher's manuscript management system. To comment on specific parts of the text, a reviewer then cites the page and line number, and possibly quotes pieces of text. In an age in which nobody uses typewriters anymore the line numbers and their spacing is often unaligned with the line spacing of the text, some systems reset line numbers on every page, some journals&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; use 2-column manuscript templates yet number only one column, and some, including in fact F1000 Research, have disposed of line numbers altogether, forcing reviewers to create some numbering of paragraphs or sentences for themselves. Authors, upon receiving the reviews weeks (or months) after submission, the time they last looked at the manuscript, then have to painstakingly link each reviewer comment to the exact position in their editable version of the manuscript (which does not have line numbers, and whose page numbers will differ from the version sent to reviewers due to cover pages etc). The "links" are typically only in the authors' heads; as there is no way to insert clickable hyperlinks from the review comments to the text position or vice versa, associating comments to text being commented on would require painstakingly copy and pasting each one of them into marginal comments (or footnotes, depending on word processor and editor).&lt;/p&gt;
&lt;p&gt;The litany doesn't end there. Once a revision of the manuscript is prepared, authors do copy and paste each reviewer comment, this time into a rebuttal letter, and then add their responses to each comment. Formatting choices for distinguishing reviewers' from authors' comments vary wildly. The most diligent authors then also copy and paste the actual verbatim changes to the text they made in response to a reviewer comment; many don't, and many times the changes to the text are extensive and scattered enough to defy even the best intentions. The process then cycles back to the reviewers, who are asked to evaluate whether the author's responses and text changes satisfy their concerns. Precisely because of the revisions to the text, the line and page numbers and quotes of original text that the reviewer used in their original comment to identify the text location are now typically no longer valid or present, so if the author didn't or couldn't copy and paste their text changes into the rebuttal letter, the reviewer has to then somehow re-identify the text location. Sometimes this is easy, many more times it's confusing enough that if the author's response isn't too defiant a reviewer will be inclined to simply check it off.&lt;/p&gt;
&lt;h3&gt;The cost to knowledge production and consumption&lt;/h3&gt;
&lt;p&gt;Perhaps most importantly, a reader of the &lt;em&gt;article&lt;/em&gt; will see none of this. No markers in the article text will highlight which specific claims, data, or method a reviewer has questioned. There is no indication where reviewers agree or disagree in their criticisms. There is no hint which claims were deleted, or restated in a revision, and why; likewise, why some claims were not changed even though a reviewer questioned them is also not immediately visible.&lt;/p&gt;
&lt;p&gt;With peer-reviews that are open instead of closed, someone with enough understanding, skill, and time at least &lt;em&gt;can&lt;/em&gt; extract this information from the peer-reviews and rebuttal letter(s), which is clearly a huge step forward towards research transparency. However, in the digital age there is little justification anymore for erecting (or leaving) a wall between the articles containing our scientific knowledge, and the fine-grained comments experts make on them. And there's also little justification for the peer-review process being as onerous to experts and as inscrutable to non-experts as it is.&lt;/p&gt;
&lt;h2&gt;The experiment: review comments as online text annotations&lt;/h2&gt;
&lt;p&gt;Enter &lt;a href="http://hypothes.is"&gt;Hypothes.is&lt;/a&gt;. The project, launched in 2011 through a &lt;a href="https://www.kickstarter.com/projects/dwhly/hypothesis-taking-peer-review-to-the-internet"&gt;Kickstarter campaign&lt;/a&gt; &lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, boldly aims to make the world's online knowledge and information peer-reviewed, by developing &lt;a href="http://www.openannotation.org/spec/core/"&gt;standards&lt;/a&gt; and an open-source &lt;a href="https://hypothes.is/contribute"&gt;platform for online annotation&lt;/a&gt;:&lt;/p&gt;
&lt;figure style="max-width: 128px;" class="floatright"&gt;
&lt;a href="http://hypothes.is"&gt;&lt;img class="img-responsive" src="/images/Hypothes.is_logo.jpg"/&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;Hypothes.is will be an open platform for the collaborative evaluation of knowledge. It will combine sentence-level critique with community peer-review to provide commentary, references, and insight on top of news, blogs, scientific articles, books, terms of service, ballot initiatives, legislation and regulations, software code and more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reviewer comments in scientific peer-review for the most part &lt;em&gt;are&lt;/em&gt; annotations. With F1000 Research articles being already fully on the web at the time of review&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;, and my review comments to be openly available and associated with my name by definition, this seemed like a perfect opportunity to try open annotation in Hypothes.is as a scientific peer-review tool that wouldn't suffer from many of the shortcomings outlined above&lt;sup id="fnref:other work"&gt;&lt;a class="footnote-ref" href="#fn:other work" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2&gt;Results: Lots of potential, lots of ways to go&lt;/h2&gt;
&lt;p&gt;There are two ways to see the review comments made with Hypothes.is. One is to install the &lt;a href="http://hypothes.is/alpha"&gt;browser extension&lt;/a&gt; (if you haven't already), navigating to the &lt;a href="http://f1000research.com/articles/3-62/v1"&gt;article URL&lt;/a&gt;, and turning on the extension. At present this unfortunately requires Google Chrome. (The extension is also required for making, or replying to annotations.) The other is the &lt;a href="https://hypothes.is/stream#?user=hlapp&amp;amp;uri=http:%2F%2Ff1000research.com%2Farticles%2F3-62%2Fv1"&gt;Hypothes.is "stream" interface&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://f1000research.com/articles/3-62/v1#article-reports"&gt;full review&lt;/a&gt;, with overarching comments preceding the link to the detailed annotations, is available form the &lt;a href="http://f1000research.com/articles/3-62/"&gt;article's onlne version&lt;/a&gt; at F1000 Research. You will notice that the review includes a complete transcript of the online annotations; see below for why.&lt;/p&gt;
&lt;p&gt;Some of the lessons learned from the experiment follow.&lt;/p&gt;
&lt;h3&gt;What worked (or could have worked) well&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Even though characterized as "alpha" software, making my comments with the &lt;a href="https://hypothes.is/what-is-it"&gt;Hypothes.is Annotator&lt;/a&gt; via direct annotation of an online text as I read through it was far more efficient than making notes with the usual cumbersome way of citing line, page, and paragraph numbers and quoting. Essentially, one highlights the sentence or phrase one wishes to comment on, clicks the &lt;a href="http://annotatorjs.org/"&gt;Annotator&lt;/a&gt; icon that appears and enters the comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comments can be edited or deleted later, such as if later parts of the manuscript put the commented text in a different light. Comments can also be tagged, which could be used to distinguish between major and minor comments (but I didn't).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An author (or in fact anyone else) could directly respond to the comments, establishing a discussion thread that is directly linked to the part of the text that is its subject. Obviously, this can't be seen yet, and in fact may never be, see below.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Much room for improvement&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Although the comments comprising a review can be &lt;a href="https://hypothes.is/stream#?user=hlapp&amp;amp;uri=http:%2F%2Ff1000research.com%2Farticles%2F3-62%2Fv1"&gt;retrieved in whole through a URL reference&lt;/a&gt;, bundling them up in the form needed remains lacking.&lt;ul&gt;
&lt;li&gt;The Hypothes.is platform doesn't yet have a URL that resolves as the review annotations as a whole, or a single annotation on top of the online text&lt;sup id="fnref:Diigo link feature"&gt;&lt;a class="footnote-ref" href="#fn:Diigo link feature" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;. This view requires manually &lt;a href="http://hypothes.is/alpha"&gt;installing a browser extension&lt;/a&gt;, turning it on when on the article page, and activating highlighting mode. &lt;/li&gt;
&lt;li&gt;The URL interface that exists for retrieving review comments (the &lt;a href="http://hypothes.is/stream"&gt;"stream" interface&lt;/a&gt;) shows them in reverse chronological order (most recent first), and for now there is no option to control the ordering. The awkward consequence of this is that if a reviewer comments on an article from start to end (as would be typical), the author would need to read the comment stream last to first to be consistent with the direction of article and comment flow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Critical kinds of integration with a scientific journal's workflow and requirements remain challenging.&lt;ul&gt;
&lt;li&gt;As will likely any journal, F1000 Research wants a permanent record of the annotations that comprise a peer-review, and one that can accompany the article's PDF version. There is no direct way to create a PDF yet from Hyppthes.is annotations, leaving print-to-file as the only alternative. But this loses many of the advantages of using online annotation to start with, such as easy pinpointing of text position, establishing a conversation thread, and making the conversation accessible to the public, unless some way is found to keep offline and online versions in synchrony. &lt;/li&gt;
&lt;li&gt;Although reviewer comments on F1000 Research do become public, they normally don't do so instantly, but are reviewed for meeting professional standards by F1000 staff first. A journal exercising and enforcing quality control is certainly a Good Thing. The comments I made using Hypothes.is became public immediately&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;, though presumably a journal-hosted version could keep them private until checked and approved.&lt;/li&gt;
&lt;li&gt;To aid in later retrievability, I added a tag "F1000 Review" to each comment. In this experiment I had to repeat this myself for every comment; ideally, a journal would have set up the &lt;a href="https://hypothes.is/what-is-it"&gt;Hypothes.is Annotator&lt;/a&gt; for itself such that comments entered by a reviewer would automatically be tagged uniquely such that they can subsequently be linked to the review and reviewer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the concrete case, the deficiencies in fitting with the journal's record keeping and workflow requirements were strong enough that F1000 staff ended up transcribing the comments into an offline text that form the permanent record, and which will thus likely be what the article author ends up responding to (lest they create yet more transcription work for the F1000 staff). So in the end my experiment caused more work rather than less for the journal staff.&lt;/p&gt;
&lt;h3&gt;Open questions&lt;/h3&gt;
&lt;p&gt;Most reviews will include some overarching commentary, often a summary or synthesis of the more detailed comments. If a reviewer recommends rejection (or in the case of F1000 Research, &lt;a href="https://f1000research.com/referee-guidelines#your-role"&gt;withholds "approval"&lt;/a&gt;), the most serious concerns about the work will usually be highlighted there. It's unclear to me whether that part fits the mold of a text annotation equally well; it really applies to the article as a whole than some part of the text.&lt;/p&gt;
&lt;p&gt;In my case, I entered the overarching commentary into the review submission form. However, a solution that is better integrated with online annotation might have a more seamless way of providing, and showing them at the article level. &lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Given how antiquated, inefficient, and wholly unnecessary the current way of conducting peer-reviews is in the digital age, it's hard to imagine that this isn't on the verge of being innovated. I think the shift in ecosystem and economic driving forces in scholarly publishing are providing the perfect fertile ground. A journal's subject area is becoming increasingly less critical as a sustaining market niche; instead, the emerging category of "mega-journals" pioneered by &lt;a href="http://plosone.org"&gt;PLoS ONE&lt;/a&gt; will increasingly compete on the basis of customer service and maximizing the impact of their publications (and thus contributions to their quality). I'm willing to bet that this will soon include overhauls of the peer-review process.&lt;/p&gt;
&lt;p&gt;I hope that online annotation platforms and standards will figure prominently in this transformation, so that peer-review commentary, and the scholars who make them, can become a seamless part of the web's discussion layer. However, the experiment also shows that integration of online annotation tools, as sophisticated and promising as they are, has still a long ways to go. Making this happen will take journals and publishers assuming ownership of it.&lt;/p&gt;
&lt;p&gt;Finally, as excited as I have been about &lt;a href="http://hypothes.is"&gt;Hypothes.is&lt;/a&gt; ever since it appeared on the scene, as an ambition, as a community nurturing initiative, and as an actual software project, my sense is that it would benefit well from pushing itself more from aspiration towards actual production uses. The browser extension is still only available for Chrome (and in fact not even advertised on the front page). The stream interface is unadvertised and misses basic features (including an ability as fundamental to the ideas as responding to an annotation). Perhaps scholarly publishing is only a small pond in the greater picture. But at a time when scandals of scientific fraud, data fabrication, and lack of repeatability shake the public's trust in science more than ever, creating an online conversation around scientific critique, in particular with a platform that is designed open throughout, would seem as an opportunity with potential benefits for everyone.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Unlike closed anonymous reviews, this allows a scholar to receive credit for the reviews she writes. It could also be used to "rate" the quality of reviews (as perhaps measured by depth, constructiveness, etc), which would provide more direct incentives for more in-depth reviews. But F1000 Research doesn't seem to be using it for this purpose (yet?); arguably, doing so is also fraught with problems (how to measure review quality? who should do the rating? how to prevent review rating from biasing reviewers towards positivity? etc).&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Bioinformatics (OUP), I am looking at you.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Disclosures: I was one of the campaign's backers. I was also chair of the organizing committee that invited Dan Whaley (founder of Hypothes.is) to present &lt;a href="https://www.youtube.com/watch?v=cNrAS979MfA"&gt;one of the 2012 iEvoBio Conference keynote addresses&lt;/a&gt; (which is well worth watching, BTW. And yes, that's me introducing him, and yes, I'm wearing a Hypothes.is t-shirt.).&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;This is more novel than one might think. For journals that publish articles only post-acceptance (as almost all do) manuscripts can take a significant amount of time after acceptance -- sometimes weeks, or months -- before they appear online. Some publishers have introduced "early online access" sections for their journals; manuscripts in those sections are typically only available in the form of "preliminary" PDFs, not in HTML. Most online annotation platforms don't, or don't yet work on PDFs, and the preliminary PDFs are expressly intended to be superseded by the final typeset version, rather than to have a persistent presence. &amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:other work"&gt;
&lt;p&gt;I am of course far from the first one to think about open online annotation and Hypothes.is for scientific peer-review. Peter Brantley, Hypothes.is' Director of Scholarly Communication, in his &lt;a href="http://scholarlykitchen.sspnet.org/2013/10/09/scholarly-kitchen-podcast-peter-brantley-on-annotating-the-web/"&gt;interview for The Scholarly Kitchen&lt;/a&gt; speaks specifically about the possibility of utilizing open annotation for scientific peer-review, and there's a &lt;a href="http://researchity.net/2011/11/01/peer-review-should-be-more-like-hypothes-is-than-hypothes-is-should-be-like-peer-review/"&gt;post on Researchity&lt;/a&gt; from the time of the Kickstarter campaign, to name a few.&amp;#160;&lt;a class="footnote-backref" href="#fnref:other work" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;I realized only after the fact that this is a difference to how comments would have become public if submitted solely through the journal's review submission form. However, F1000 Research's reviewer guidelines didn't prohibit (or even mention) the use of external online annotation tools; perhaps this is something that journals innovating scholarly peer-review should be more cognizant, and explicit about.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Diigo link feature"&gt;
&lt;p&gt;&lt;a href="http://www.diigo.com"&gt;Diigo&lt;/a&gt;, an online bookmarking and annotation service, does allow to provide a link to the annotated version of an online page. For example, this is an &lt;a href="https://diigo.com/01j2ng"&gt;article with highlights I made&lt;/a&gt; for a journal club. It works well in Chrome and Firefox but only if the respective browser extension is installed. Diigo is a pretty mature product that I use frequently and could have used for this experiment as well; however, it is commercial and not an open-source platform, whereas Hypothes.is could be adapted, contributed to, extended, and deployed by anyone.&amp;#160;&lt;a class="footnote-backref" href="#fnref:Diigo link feature" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="open content"></category><category term="scholarly publishing"></category></entry><entry><title>Computer failure without the agony - wishful thinking?</title><link href="http://lappland.io/blog/2014/02/hardware-failure-and-productivity-loss/" rel="alternate"></link><updated>2014-02-08T23:57:57-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-02-08:blog/2014/02/hardware-failure-and-productivity-loss/</id><summary type="html">&lt;p&gt;Yesterday my laptop (a Macbook Pro) died. It showed the first signs of severe illness 2 days earlier, seemed to recover at first after a lot of agony, but then deteriorated rapidly yesterday morning. This post isn't about a story of data loss, even if that is sadly still more common than it needs to be. My laptop is backed up to the cloud almost continuously throughout the day. What I am worried about is not having lost any work;  it is the loss of productivity, which can be just as bad&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;More specifically, recommended practices and supporting technologies for preventing data loss in computer crashes have matured enormously to a point that anyone can implement them on their own, without the need for a technically sophisticated setup or IT department. However, based on what I've observed so far in my own quest to regain productivity, practices and technologies to limit productivity loss and disruptions seem to be still in their infancy. &lt;/p&gt;
&lt;h2&gt;Zero productivity loss: A dream, or a reality soon?&lt;/h2&gt;
&lt;p&gt;A day later, I'm mostly up and running again, even if with lots of caveats. But a day of lost productivity is still an awful lot. Imagine a world in which recovering to full productivity after losing your laptop takes the same or less time than making a cappuccino. Hardware can and will fail. Imagine a world in which, just as we now keep a spare flashlight or a spare battery, we keep a spare laptop. If the one you use fails, you simply switch to the spare. No sweat, no anxiety, no panic, just an additional trip to the post office to ship the broken one to repair.&lt;/p&gt;
&lt;p&gt;I will argue that we are as close as never before to having the technologies that allow us to strive for zero productivity loss from hardware failure not only for application servers but also for personal computing. But getting there will require rethinking from the ground up what a personal computer is. &lt;/p&gt;
&lt;h2&gt;The efficient restore problem&lt;/h2&gt;
&lt;p&gt;Due to the warning signs 2 days earlier, I had a freshly imaged loaner laptop already waiting for me. The question now was probably similar to what it is for most people in this situation: How efficiently and quickly can I get a sufficiently working environment up on the loaner to regain productivity, ideally in a way that will also limit the disruption from transitioning back to my own laptop once it is back from repair.&lt;/p&gt;
&lt;p&gt;What do I need to get back up to running? As is probably fairly typical, I need a variety of more or less specialized software, where specialized means anything that isn't commonly installed on a freshly imaged system. For me this includes tools such as git, Emacs, a GNU C compiler, comprehensive Perl and Python installations, R, Protégé, and various productivity software. I also need access to a large variety of files, including the digital file drawer of administrative documents, presentations, manuscripts, data files, ontologies, and source code.&lt;/p&gt;
&lt;p&gt;My initial, and as it turned out rather ill-advised approach to getting this all back was along the thought of &lt;em&gt;bulk restore&lt;/em&gt;. That is, rather than wasting my time thinking about, picking, and choosing exactly what I will need (and in the course forgetting half of it), I checked the base directory for all code bases and all documents in Crashplan's backup archive and hit the "Restore" button. To my disappointment, after the restore commenced I soon found it occupied with lots and lots of expansive codebases and numerous voluminous documents that I had forgotten I even had lying around, and that for sure I wasn't going to need during this temporary period working off of a loaner.&lt;/p&gt;
&lt;p&gt;So while the bulk document restore was chugging away, I abandoned my original plan to restore custom software by bulk restoring &lt;code&gt;/Applications&lt;/code&gt; and &lt;code&gt;/usr/local&lt;/code&gt;, and instead tried my hand at a different approach, which I'll call &lt;em&gt;project environment restore&lt;/em&gt;. By project environment I mean the collection of tools, libraries, files, and configuration settings that are needed to do the work on one particular project. (As tasks in a project may change over time, so may the constituents of the project environment.) For the project I picked (due yesterday), I needed to operate on a git repository, make multi-way branch merges and resolve resulting conflicts. It took me less than 20 minutes to install git and TextWrangler from the web and to clone the repository. The vast majority of that time was spent installing the OSX developer tools, which git requires --- and helpfully prompts for.  &lt;/p&gt;
&lt;h2&gt;Why efficient restore is very difficult today&lt;/h2&gt;
&lt;p&gt;How many projects do you work on at a given time? Perhaps a handful? Even if we assume up to a dozen, 3 hours to restore all of them to working order would still be a fraction of what any Time Machine or online restore from backup takes. While it sounds intriguing, in practice this extrapolation is invalid for a number of reasons, including (and not limited to) the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In science and software engineering, projects often need software tools that need to be custom-built and/or configured, which can be very time-consuming.&lt;/li&gt;
&lt;li&gt;A project may involve data files that individually or together are far too big to be held on Dropbox or a git repository.&lt;/li&gt;
&lt;li&gt;Development and analysis tasks may require pre-populated databases and precomputed output from preceding steps that are time-consuming to recreate, or that even exceed the capacities of the temporary loaner equipment.&lt;/li&gt;
&lt;li&gt;A project may require browsing through an indeterminate number of documents, such as manuscripts, presentations, and the like.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On top of that, there is no 1:n relationship between projects and the tools and files that comprise their environment. This is most obviously true for general-purpose tools, but it also applies to data files, manuscripts, presentations, and even source code files. We don't want our files duplicated all over the place, so instead of by project, we organize them by type. "Documents" go into &lt;code&gt;~/Documents&lt;/code&gt;, and if you're like me, you have one folder under which you have all your code repositories. This makes it yet more difficult to restore a project in a targeted way.&lt;/p&gt;
&lt;h2&gt;Rethinking the personal computer&lt;/h2&gt;
&lt;p&gt;If you're like me, your personal computer, from the days they were all desktops to today's laptops, represents a lot of investment, time much more than money. It has numerous customizations, some of which required manual tweaks and anxious waiting whether some code builds or not. There are databases and other servers with carefully crafted machine-tailored configurations. If you're like me, you are not a sysadmin, and thus you didn't document let alone script how you did those customizations. You probably have data and analyses on your machine that you know work with the versions of the operating system, libraries, and software you have installed.&lt;/p&gt;
&lt;p&gt;Even if everything is backed up well, there is a lot of time investment at stake when such a workhorse fails. What if we moved the workhorse into the cloud, and recast the personal computer at which we work as a vehicle for running a web browser on a high-quality screen, and for plugging in peripherals such as keyboard, mouse, camera, and speakers&lt;sup id="fnref:netbook"&gt;&lt;a class="footnote-ref" href="#fn:netbook" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;
&lt;p&gt;Virtual machines have numerous advantages to physical ones. For example, they can be cloned in minutes, shut down or spun up when needed, and their CPU and memory capacity can be elastically expanded or shrunk. Even though these advantages are well appreciated and widely applied for hosting machines that function as servers, the adoption of cloud hosting for personal computing is taking root only very slowly. &lt;/p&gt;
&lt;p&gt;Perhaps part of the reason is that it requires behavior change, and the technologies that minimize the required change or make it transparent are only now beginning to mature. We have grown accustomed to &lt;a href="http://en.wikipedia.org/wiki/Moore's_law"&gt;personal computers becoming exponentially more powerful&lt;/a&gt;, allowing them to run ever-more resource-hungry and sophisticated software. Seemingly reducing one's personal computer at its pinnacle of computational power to a machine that simply runs a web browser can easily strike as irrational in light of that trajectory.&lt;/p&gt;
&lt;h2&gt;An example available today: Google's Chromebook&lt;/h2&gt;
&lt;p&gt;The sea change may have started. For example, Google and other vendors sell &lt;a href="http://www.google.com/intl/en/chrome/devices/"&gt;Chromebooks&lt;/a&gt;, for which from the perspective of an end-user &lt;a href="https://www.google.com/intl/en/chrome/"&gt;Google Chrome&lt;/a&gt; is essentially the only software they'll run.&lt;/p&gt;
&lt;p&gt;Locally, that is. Through Chrome, users have access to the Google Docs online office application suite, as well as all the other Google Apps.  I have used Google Docs regularly for a long time, and I suspect most of you have, too. With &lt;a href="http://paperpile.com"&gt;Paperpile&lt;/a&gt; working as well as it does, managing citations and generating a bibliography is now possible, too. What about developing, debugging, and building software code, though? Although I suspect that most developers are still using local software for these tasks, increasingly sophisticated online code editors have been sprouting up&lt;sup id="fnref:code editors"&gt;&lt;a class="footnote-ref" href="#fn:code editors" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Manipulating, analyzing, and visualizing data, especially on a large scale, perhaps remains for now as the last frontier. However, even that frontier is crumbling. For data analysis in R, &lt;a href="https://www.rstudio.com/ide/docs/server/getting_started"&gt;RStudio can be run as a server&lt;/a&gt; with a web-browser interface. For command-line tools, there are various &lt;a href="http://en.wikipedia.org/wiki/Web-based_SSH"&gt;web-based SSH terminal clients&lt;/a&gt;. &lt;a href="http://openrefine.org/"&gt;Open Refine&lt;/a&gt; is already a web-application. &lt;/p&gt;
&lt;h2&gt;Zero productivity loss is all but one opportunity&lt;/h2&gt;
&lt;p&gt;Chromebooks sell for a lot less than ordinary laptops&lt;sup id="fnref:chromebook"&gt;&lt;a class="footnote-ref" href="#fn:chromebook" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;, yet I don't think that their main, or even a realistic promise is to make personal computing cheaper. Instead, these kinds of devices, and their underlying concept of ubiquitous personal computing, hold numerous opportunities for making computing flexibility, choices, and power available to everyone. And freedom from hardware failure-induced agony.&lt;/p&gt;
&lt;p&gt;Some of the money saved one could use to keep a spare device. So that when one device gets sick, you switch to the other with zero loss of productivity. One could use some of the savings to occasionally spin up an AWS machine for the data crunching or code compilation that are difficult to achieve through dedicated web-applications.&lt;/p&gt;
&lt;p&gt;If Chromebook-like devices become common, they may profoundly change IT on-boarding procedures at institutions. Today, such procedures are focused on procuring, configuring, imaging, and maintaining physical hardware.  In the future, the focus of on-boarding could instead consist of determining the best mix of online private and public cloud service subscriptions for a new employee, and then setting them all up automatically through APIs.&lt;/p&gt;
&lt;h2&gt;Postscriptum: A birthday, and a disclosure&lt;/h2&gt;
&lt;p&gt;Tomorrow is the birthday of one of my daughters. She'll become 11 years old, and one of her presents will be a &lt;a href="http://www.google.com/intl/en/chrome/devices/hp-chromebook-11/"&gt;Chromebook&lt;/a&gt;. That decision is the result of a lot of agonizing over what's right for her yet affordable, and is entirely coincidental to my laptop's life event. Many of the thoughts written up here have, however, been prompted by the coincidence of having to think through what's right for her, and being forced to ask whether what I have myself is really as right for me as I've complacently taken it to be. One of the many blessings of having children.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;As is probably the case for many, my laptop is my single central workhorse. I am giving a &lt;a href="http://www.iscb.org/cshals2014-program/cshals2014-keynote-speakers/cshals2014-keynote-lapp"&gt;major talk&lt;/a&gt; in just 3 weeks, and need all the time I can get to prepare for it, on top of a dense schedule of other deliverables I need to keep moving. Of course, if that wasn't enough, I also got ill myself. This or some other combination of aggravating factors is probably true for most who have been hit with computer failure.&lt;/p&gt;
&lt;p&gt;There is an all too human temptation to bemoan how such disrupting events seem to mysteriously occur at times we can least afford them. However, if we lead busy lives organized towards productivity, arguably the chances that a potentially productivity disrupting event falls in a time we aren't pressed for time is vanishingly small. That's possibly a problem in its own right, but outside the scope of this post.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:netbook"&gt;
&lt;p&gt;This idea is not exactly the same as, but was obviously preceded and precipitated by the invention of &lt;a href="http://en.wikipedia.org/wiki/Netbook"&gt;Netbooks&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:netbook" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:code editors"&gt;
&lt;p&gt;See for example &lt;a href="https://c9.io/"&gt;Cloud9 IDE&lt;/a&gt;, &lt;a href="https://codeanywhere.net/"&gt;CodeAnywhere&lt;/a&gt;, or &lt;a href="http://codepen.io/"&gt;CodePen&lt;/a&gt;, just from a simple Google search. I'm sure there are more.&amp;#160;&lt;a class="footnote-backref" href="#fnref:code editors" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:chromebook"&gt;
&lt;p&gt;For example, &lt;a href="http://www.google.com/intl/en/chrome/devices/hp-14-chromebook.html#hp-cb-14"&gt;Google quotes the 14'' HP Chromebook&lt;/a&gt; as starting from $299.&amp;#160;&lt;a class="footnote-backref" href="#fnref:chromebook" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="hardware"></category><category term="cloud"></category></entry><entry><title>Data flirting, or an attempt to save a beautiful tree?</title><link href="http://lappland.io/blog/2014/01/data-flirting-or-saving-beautiful-tree/" rel="alternate"></link><updated>2014-01-17T22:22:52-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-17:blog/2014/01/data-flirting-or-saving-beautiful-tree/</id><summary type="html">&lt;p&gt;Recently, &lt;a href="http://treebase.org" title="TreeBASE"&gt;TreeBASE&lt;/a&gt; received the following request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;I am just beginning to compile a submission.&lt;/p&gt;
&lt;p&gt;The data-matrix is no problem. But in your introductory screens I see nothing explicit about the file format to be used for trees. By implication, these too should be in Nexus format, whereas I would prefer to submit tiff files of the actual published figures.&lt;/p&gt;
&lt;p&gt;Please advise.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you care about preservation, sharing, and reusability of phylogenetic data as much as I do, your first reaction might be that combination of annoyance and incredulity we typically refer to by three capital letters. And never mind that the &lt;a href="http://treebase.org/treebase-web/submitTutorial.html"&gt;submission instructions&lt;/a&gt; say &lt;em&gt;"Data are uploaded to TreeBASE in the NEXUS format"&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;But upon closer inspection, as much as it appears like a case of data flirting&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, it might just be a case of someone trying to save a beautiful tree. As Rob Guralnick, Mark Westneat, and I &lt;a href="http://dx.doi.org/10.7287/peerj.preprints.206v1"&gt;wrote in a submission to the 2012 iEvoBio Conference&lt;/a&gt;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The story of biological evolution is highly complex and the subject of an enduring quest for better understanding. Yet it is also one of remarkable beauty, as given testimony by the numerous phylogenetic illustrations in publications that show in fascinating detail how traits, function, or morphology may have evolved along a tree. [Almost] all of them end up buried in articles, undiscoverable on their own, locked away behind paywalls, copyrighted by the publisher rather than the creator, and unavailable for repurposing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure style="max-width: 380px;" class="floatright"&gt;
&lt;a href="http://www.pnas.org/content/108/14/5690/F1.expansion.html"&gt;&lt;img class="img-responsive" src="/images/Wiegmann_et_al_Figure1.png"/&gt;&lt;/a&gt;&lt;figcaption&gt;
Phylogenetic tree for Diptera. Reproduced from Figure 1 in Wiegmann BM et al. (2011) &lt;a href="http://dx.doi.org/10.1073/pnas.1012675108" target="_blank"&gt;Episodic radiations in the fly tree of life&lt;/a&gt;. Proc Natl Acad Sci U S A 108: 5690–5695.
&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Phylogenetic tree illustrations, such as the one to the right, can be rich in information much beyond the topology. Today, no good format exists for archiving this information, let alone in a machine-interpretable form&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, other than archiving the image and archiving the accompanying (natural language) arcticle text. Text-based and thus machine-readable phylogenetic data formats such as &lt;a href="http://nexml.org"&gt;NeXML&lt;/a&gt;&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;, NEXUS&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;, and &lt;a href="http://en.wikipedia.org/wiki/Newick_format"&gt;Newick&lt;/a&gt;, to different degrees allow one to store metadata about elements of a tree right along with the tree, but at present even NeXML doesn't even come close&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; to cover the whole breadth of visual adornments that authors might use to convey information. Hence, If one were to archive only the machine-readable version of a phylogeny, phylogenetic knowledge near and dear to an author's heart may easily be lost.&lt;/p&gt;
&lt;p&gt;So why not archive both? Unfortunately, TreeBASE will not take an image of a tree, only a (text-based) NEXUS file. Or fortunately, depending on your perspective. At least it ensures that the phylogenies it holds are available in machine-readable form. The digital data archive &lt;a href="http://datadryad.org"&gt;Dryad&lt;/a&gt; shows that this otherwise isn't to be taken for granted. Although it gives &lt;a href="http://datadryad.org/pages/faq#depositing-acceptable-data"&gt;some general guidelines&lt;/a&gt;, due to its broad disciplinary scope Dryad does not and arguably cannot impose strict requirements on the format of deposited data. This gives authors of published papers the flexibility to archive any kind of data they deem supporting the article or otherwise worth preserving. On the flip side this flexibility then doesn't prevent records which include a phylogeny &lt;em&gt;only&lt;/em&gt; in image format. And looking at some examples (&lt;a href="http://dx.doi.org/10.5061/dryad.vp634306"&gt;here&lt;/a&gt; and &lt;a href="http://datadryad.org/resource/doi:10.5061/dryad.3mt58823"&gt;here&lt;/a&gt;), these don't even look like containing information in visual form that would be difficult or impossible to include in a text format.&lt;/p&gt;
&lt;p&gt;Even a phylogeny that is archived in machine-readable format is not necessarily fit for a purpose that would require machine readability&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;. In response to the difficulties the &lt;a href="http://opentreeoflife.org"&gt;Open Tree project&lt;/a&gt; has encountered&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt; in synthesizing a Tree of Life from all published trees, investigators from this and other large-scale phylogenetic knowledge synthesis projects are now drafting guidelines for how to archive a phylogeny so it can best be built upon by others in the future. &lt;a href="https://docs.google.com/document/d/1rDHUQYBM079w0v8xpWw2t292m2N3FeaaZucEsWAywYI/edit#"&gt;Public comment and input is welcome&lt;/a&gt;, and will likely become part of phylogenetic data sharing mandates that NSF &lt;a href="http://blog.opentreeoflife.org/2014/01/15/data-sharing-opentree-and-golife/"&gt;appears determined to include in funding opportunities&lt;/a&gt;&lt;sup id="fnref:8"&gt;&lt;a class="footnote-ref" href="#fn:8" rel="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;To my knowledge, the term &lt;em&gt;data flirting&lt;/em&gt; was coined by &lt;a href="http://en.wikipedia.org/wiki/Carole_Goble"&gt;Carole Goble&lt;/a&gt;, although it seems difficult to find a direct citation. I first heard her use it during &lt;a href="http://www.iscb.org/ismbeccb2013-program/ismbeccb2013-keynotes/ismbeccb2013-carolegoble"&gt;her keynote at ISMB 2013&lt;/a&gt;, and it caught on instantly with the audience. The following is the best mention I could find on the interwebs, giving meaning &lt;em&gt;and&lt;/em&gt; context: &lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&amp;quot;Papers are data flirting exercises&amp;quot;, says .&lt;a href="https://twitter.com/CaroleAnneGoble"&gt;@CaroleAnneGoble&lt;/a&gt; - show some metadata to make people want the real thing. &lt;a href="https://twitter.com/search?q=%23ismbeccb&amp;amp;src=hash"&gt;#ismbeccb&lt;/a&gt; &lt;a href="https://twitter.com/search?q=%23openscience&amp;amp;src=hash"&gt;#openscience&lt;/a&gt;&lt;/p&gt;&amp;mdash; Daniel Mietchen (@EvoMRI) &lt;a href="https://twitter.com/EvoMRI/statuses/359578812226347008"&gt;July 23, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Here I'm extending the meaning of &lt;em&gt;data flirting&lt;/em&gt; to include &lt;em&gt;"show some non-reusable form of the data so I want to ask you for the real thing"&lt;/em&gt;. &amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/hlapp/liberating-our-beautiful-trees-a-call-to-arms"&gt;Slides for the presented talk&lt;/a&gt; are on Slideshare. Interestingly, although it is a purely aspirational talk, in the sense that there is no active project or community initiative behind it (yet?), it is my second-most viewed slideshow on Slideshare. Perhaps it's the title that gets people to click on it accidentally? &amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Efforts to address this have emerged. The Phylotastic II hackathon by NESCent's &lt;a href="http://www.evoio.org/wiki/HIP"&gt;Hackathons, Interoperabiliy, Phylogenetics&lt;/a&gt; (HIP) Working Group gave rise to a subgroup named &lt;a href="http://www.evoio.org/wiki/.TSS_and_extended_NeXML"&gt;PhyloStyloTastic&lt;/a&gt; aiming to create a CSS-like standard for "styled" phylogenies. &lt;a href="http://www.jsphylosvg.com/"&gt;jsPhyloSVG&lt;/a&gt; is a JavaScript library that renders &lt;a href="http://www.phyloxml.org/"&gt;phyloXML&lt;/a&gt;-formatted phylogenies with graphical adornment markup.&lt;/p&gt;
&lt;p&gt;See also this publication: Smits SA., Ouverney CC (2010) &lt;a href="](http://dx.doi.org/10.1371/journal.pone.0012267)"&gt;jsPhyloSVG: A Javascript Library for Visualizing Interactive and Vector-Based Phylogenetic Trees on the Web&lt;/a&gt;. PLoS ONE 5: e12267.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Vos RA, Balhoff JP, Caravas JA, Holder MT, Lapp H, et al. (2012) &lt;a href="http://dx.doi.org/10.1093/sysbio/sys025"&gt;NeXML: rich, extensible, and verifiable representation of comparative data and metadata&lt;/a&gt;. Syst Biol 61: 675–689.&lt;/p&gt;
&lt;p&gt;One of the novelties of NeXML is that it allows arbitrary (RDFa-style) metadata annotation of any element of a phylogeny. In principle, this could include stylistic or graphical markup, but a convention or standard for such a markup annotation does not exist yet, let alone software that would interpret it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;Maddison D, Swofford D, Maddison W (1997) &lt;a href="http://www.ncbi.nlm.nih.gov/pubmed/11975335"&gt;NEXUS: an extensible file format for systematic information&lt;/a&gt;. Syst Biol 46: 590–621.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;&lt;a href="http://dx.doi.org/10.6084/m9.figshare.902865"&gt;This abstract&lt;/a&gt;, and the &lt;a href="http://www.slideshare.net/hlapp/miapa-i-evobio-2013"&gt;slides&lt;/a&gt;, for a lightning talk I and a group of collaborators presented at the 2013 iEvoBio Conference give some high-level background. See also this paper: Leebens-Mack J, Vision T, Brenner E, Bowers JE, Cannon S, et al. (2006) &lt;a href="http://dx.doi.org/10.1089/omi.2006.10.231"&gt;Taking the first steps towards a standard for reporting on phylogenies: Minimum Information About a Phylogenetic Analysis (MIAPA)&lt;/a&gt;. OMICS 10: 231–237.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Drew BT, Gazis R, Cabezas P, Swithers KS, Deng J, et al. (2013) &lt;a href="http://dx.doi.org/10.1371/journal.pbio.1001636"&gt;Lost Branches on the Tree of Life&lt;/a&gt;. PLoS Biol 11: e1001636.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:8"&gt;
&lt;p&gt;Instead of the typically vague and generic statements found in past NSF program solicitations, recent ones have become increasingly specific (e.g., see the  &lt;a href="http://www.nsf.gov/pubs/2014/nsf14525/nsf14525.htm"&gt;2014 Dimensions of Biodiversity&lt;/a&gt; solicitation). Why these are problematic deserves its own discussion. I'll update this footnote with a link once that post is up.&amp;#160;&lt;a class="footnote-backref" href="#fnref:8" rev="footnote" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="data sharing"></category><category term="data reuse"></category></entry><entry><title>A Creative Commons license chooser macro for Pelican blogs</title><link href="http://lappland.io/blog/2014/01/macro-for-creative-commons-licence-mark/" rel="alternate"></link><updated>2014-01-12T21:02:42-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-12:blog/2014/01/macro-for-creative-commons-licence-mark/</id><summary type="html">&lt;p&gt;As creative expression, blogs and other authored web content qualify for copyright protection. Yet, a number of Pelican (a static site and blog generator) themes, including the default &lt;code&gt;notmyidea&lt;/code&gt; and &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;the one I am using&lt;/a&gt;, do not include configuration variables for displaying copyright, and more importantly, the terms of reuse, i.e., the license. &lt;/p&gt;
&lt;p&gt;Presumably this is not because most blog writers don't expect their content to ever be reused. Of course, it is easy enough to tweak a theme's template(s) to include the author's choice of license. However, every tweak to a theme's templates makes it diverge a little more from its origin, and thus a little more difficult to upgrade it when the theme developer improves it. This is exactly the situation with the &lt;code&gt;pelican-bootstrap3&lt;/code&gt; theme I am using - it is under active development, including in fact by myself.&lt;/p&gt;
&lt;h2&gt;A Creative Commons license chooser as a macro&lt;/h2&gt;
&lt;p&gt;So I decided to address this in a way that would be reusable by the &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; community. I'm a big fan of &lt;a href="http://creativecommons.org"&gt;Creative Commons&lt;/a&gt; and their legal work to make the world's online content better shareable, and so I wrote a &lt;a href="http://jinja.pocoo.org/docs/templates/#macros"&gt;Jinja2 macro&lt;/a&gt; that generates, in a configurable way, a Creative Commons license mark, mirroring the choices that the &lt;a href="http://creativecommons.org/choose/"&gt;Creative Commons license chooser&lt;/a&gt; offers, and the HTML markup that it generates. Jinja2 is the templating language that Pelican uses, and so any &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican theme&lt;/a&gt; or Pelican-powered blog could take advantage of it. You can see the result at the bottom of this blog.&lt;/p&gt;
&lt;p&gt;The code for the macro is on Github: &lt;a href="http://github.com/hlapp/cc-tools"&gt;http://github.com/hlapp/cc-tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are its current capabilities as per its documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{# Choose the license either by name (CC-BY, CC-BY-SA, CC-BY-NC-SA, or      #}
{# CC-BY-NC-ND), or by its features (allow derivatives: Yes, No, ShareAlike;#}
{# allow commercial reuse: Yes, No). Name, if provided, takes precedence,   #}
{# and case is ignored.                                                     #}
{#                                                                          #}
{# Optional:                                                                #}
{#   br_after_icon: if true put a line break after the license icon         #}
{#   attr_markup: if true create markup for fulll attribution               #}
{#   attr_props: if attr_markup, a dict with title, name, and url keys      #}
{#               specifying how under which title, to which creator, and    #}
{#               to which URL to attribute the work                         #}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;As an example for how to apply this to a Pelican theme to add a configurable license mark, consider the &lt;a href="https://github.com/DandyDev/pelican-bootstrap3/pull/43"&gt;change set in the pull request&lt;/a&gt; that applies it to the &lt;code&gt;pelican-bootstrap3&lt;/code&gt; theme. Apart from dropping the macro in an appropriate location, and adding configuration documentation to the README, &lt;a href="https://github.com/hlapp/pelican-bootstrap3/blob/acf6a0a1b0efb0ff4c6711cd5b5b6d33c2999bde/templates/includes/footer.html#L14-17"&gt;here is where the macro is called&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;          {%- if CC_LICENSE or CC_LICENSE_DERIVATIVES or CC_LICENSE_COMMERCIAL %}
              {% from &amp;#39;includes/cc-license.html&amp;#39; import cc_license_mark %}
              &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;small&amp;gt;&lt;/span&gt;{{ cc_license_mark(cc_name=CC_LICENSE,derivatives=CC_LICENSE_DERIVATIVES,commercial=CC_LICENSE_COMMERCIAL,attr_markup=CC_ATTR_MARKUP,attr_props={&amp;#39;title&amp;#39;:SITENAME,&amp;#39;name&amp;#39;:article.author if article else AUTHOR,&amp;#39;url&amp;#39;:SITEURL}) }}&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          {% endif %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;pelicanconf.py&lt;/code&gt;, you can then enable the license mark in two ways. Either you simply set its name, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Content licensing: CC-BY&lt;/span&gt;
&lt;span class="n"&gt;CC_LICENSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CC-BY&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively, you can specify which features you want the license mark to fulfill:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Content licensing: permit derivatives, permit commercial use&lt;/span&gt;
&lt;span class="n"&gt;CC_LICENSE_DERIVATIVES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CC_LICENSE_COMMERCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Optionally, you can ask for full RDFa-compliant markup for the title, author, and source URL with which attribution should be made:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Include human and machine-readable markup for title (name of the site), &lt;/span&gt;
&lt;span class="c"&gt;# author (article author or AUTHOR),  and URL (SITEURL) in license mark&lt;/span&gt;
&lt;span class="n"&gt;CC_ATTR_MARKUP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Why not a plugin that uses the CC API?&lt;/h2&gt;
&lt;p&gt;Good question. For one, I haven't figured out yet how to cast this as a Pelican plugin. The documenation is not very details, and speaks about generators and writers, neither of which strikes me as an immediate fit. If it could be a generator plugin, how would it be invoked? &lt;/p&gt;
&lt;p&gt;Second, sadly the &lt;a href="http://api.creativecommons.org/docs/index.html"&gt;Creative Commons API&lt;/a&gt; seems to have been neglected from maintenance. The &lt;a href="http://api.creativecommons.org/docs/readme_15.html"&gt;1.5 version&lt;/a&gt; is several years old, and even the "&lt;a href="http://api.creativecommons.org/docs/readme_dev.html"&gt;development&lt;/a&gt;" version still returns the 3.0 versions of the licenses. On the flip side, using the API probably wouldn't simplify anything, and instead would require being online when the site is generated.&lt;/p&gt;
&lt;h2&gt;Why no public domain (&lt;a href="http://creativecommons.org/about/cc0"&gt;CC Zero&lt;/a&gt;) choice?&lt;/h2&gt;
&lt;p&gt;I haven't gotten to that yet. Most people I know would rather assert copyright &lt;a href="http://dx.doi.org/10.6084/m9.figshare.799766"&gt;even on content that isn't eligible&lt;/a&gt;, rather than waive it. But &lt;a href="https://github.com/hlapp/cc-tools/issues/1"&gt;the feature is registered&lt;/a&gt;, and if you know how to add it, please fork the repo and submit a pull request. &lt;/p&gt;
&lt;p&gt;Also, please add issues for any other features you'd like to see.&lt;/p&gt;
&lt;h2&gt;And why does a license mark matter?&lt;/h2&gt;
&lt;p&gt;Many people understand meanwhile that stating a license for software source code is important, because it achieves clarity on the terms of reuse. &lt;a href="http://wiki.creativecommons.org/Frequently_Asked_Questions"&gt;Creative Commons explains this&lt;/a&gt; much better, but in a nutshell, the same principle as for source code applies to authored content. As creative expression, copyright vests in its creator whether they assert it or not. A license grants rights that users would otherwise not have, and it is explicit about them.&lt;/p&gt;</summary><category term="open source"></category><category term="hacking"></category></entry><entry><title>Why hacking on your site is worth bothering</title><link href="http://lappland.io/blog/2014/01/why-its-worth-bothering/" rel="alternate"></link><updated>2014-01-06T23:27:12-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-06:blog/2014/01/why-its-worth-bothering/</id><summary type="html">&lt;p&gt;Obviously the site isn't ugly anymore. Well, IMHO anyway. I've switched the site to a &lt;a href="http://getbootstrap.com/"&gt;Bootstrap3&lt;/a&gt; theme (specifically, the &lt;a href="http://bootswatch.com/flatly/"&gt;flatly theme&lt;/a&gt; of the &lt;a href="http://bootswatch.com/"&gt;Bootswatch&lt;/a&gt; collection, using the &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; theme for, well, Pelican), and have since made &lt;a href="https://github.com/search?p=1&amp;amp;q=author%3Ahlapp+repo%3ADandyDev%2Fpelican-bootstrap3&amp;amp;ref=searchresults&amp;amp;type=Issues"&gt;a number of fixes and improvements&lt;/a&gt; to the Pelican theme code. More are in the pipeline.&lt;/p&gt;
&lt;p&gt;In fact, I'm quite pleased with the appearance now. You could consider this the good news. It's also taken me the better part of 3 days to get there. You could consider this the bad news, but I don't (not that I wouldn't have gladly gotten there faster). Why? I spent a lot of this time learning about awesome open-source tools such as &lt;a href="http://fontawesome.io/"&gt;font-awesome&lt;/a&gt;, &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, and &lt;a href="http://jinja.pocoo.org/"&gt;Jinja2 templates&lt;/a&gt;, all components that can be used (and some of which are being used in my team) for building many kinds of web-applications. I figured out why some of my changes were resulting in fatal Pelican exits. I refreshed my git-fu, my memory of git commands, and spent time thinking about how best to generate clean pull requests. Not only can all of these prove useful to me later in numerous ways, I also actually enjoyed the time. And it allowed me to make someone's software project better, even if ever so little.&lt;/p&gt;
&lt;p&gt;Which is probably part of why I feel very satisfied with the result, and certainly much more than I would have if I had stood up a Wordpress blog, even if that would have been vastly easier. And I really don't mean do pick on Wordpress - it's great software I have used for my own and still use to this day for research project blogs. Substitute your favorite blogging "platform", it's the same story - invariably their editing interfaces annoy out outright suck, because they're made to work for everyone (rather than me choosing what works best for me), and they fail, as they must, in subtle ways trying to hide the complexity of HTML from the user. So invariably what you learn from using them is how to work around the sometimes exasperating quirks of their editors. Not very satisfying to me: For what else can you use the tricks you learn, and who else can you help with them?&lt;/p&gt;
&lt;p&gt;Hence, so far so good - this endeavor has already returned some of what I was hoping to get out of it.&lt;/p&gt;</summary><category term="open source"></category><category term="hacking"></category></entry><entry><title>Ugly but live: Practicing release early.</title><link href="http://lappland.io/blog/2014/01/ugly-but-live/" rel="alternate"></link><updated>2014-01-02T20:18:02-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-02:blog/2014/01/ugly-but-live/</id><summary type="html">&lt;p&gt;The site is now live on Github pages. Not yet under it's eventual custom URL, very raw, very ugly (yes, I don't at all like the default theme!), and essentially no content. &lt;/p&gt;
&lt;p&gt;But that's precisely the point. I'm an advocate of release early, so I should try and walk the talk. I am precisely trying not to overthink this, so here it goes. It's a long ways to go, but I've fixed my installation of &lt;a href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;, installed &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;, created a site skeleton, and worked through the &lt;a href="http://docs.getpelican.com/en/3.3.0/settings.html"&gt;litany of settings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The only thing I did try to think through at least a little is how I want my URLs to look. I couldn't help it - once content is on the web, I care about its URI not changing frivolously. &lt;/p&gt;</summary><category term="open content"></category><category term="release"></category></entry><entry><title>A New Blog Is Born</title><link href="http://lappland.io/blog/2014/01/a-new-blog/" rel="alternate"></link><updated>2014-01-01T23:48:47-05:00</updated><author><name>Hilmar Lapp</name></author><id>tag:lappland.io,2014-01-01:blog/2014/01/a-new-blog/</id><summary type="html">&lt;p&gt;I am proudly bringing this site to life. It has been created using plain text and Pelican, a static site generator written in Python. Yes, Python.&lt;/p&gt;</summary><category term="testing"></category></entry></feed>